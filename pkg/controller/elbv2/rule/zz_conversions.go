/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package rule

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/elbv2"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/elbv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeRulesInput returns input for read
// operation.
func GenerateDescribeRulesInput(cr *svcapitypes.Rule) *svcsdk.DescribeRulesInput {
	res := &svcsdk.DescribeRulesInput{}

	return res
}

// GenerateRule returns the current state in the form of *svcapitypes.Rule.
func GenerateRule(resp *svcsdk.DescribeRulesOutput) *svcapitypes.Rule {
	cr := &svcapitypes.Rule{}

	found := false
	for _, elem := range resp.Rules {
		if elem.Actions != nil {
			f0 := []*svcapitypes.Action{}
			for _, f0iter := range elem.Actions {
				f0elem := &svcapitypes.Action{}
				if f0iter.AuthenticateCognitoConfig != nil {
					f0elemf0 := &svcapitypes.AuthenticateCognitoActionConfig{}
					if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
						f0elemf0f0 := map[string]*string{}
						for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
							var f0elemf0f0val string
							f0elemf0f0val = *f0elemf0f0valiter
							f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
						}
						f0elemf0.AuthenticationRequestExtraParams = f0elemf0f0
					}
					if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
						f0elemf0.OnUnauthenticatedRequest = f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateCognitoConfig.Scope != nil {
						f0elemf0.Scope = f0iter.AuthenticateCognitoConfig.Scope
					}
					if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
						f0elemf0.SessionCookieName = f0iter.AuthenticateCognitoConfig.SessionCookieName
					}
					if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
						f0elemf0.SessionTimeout = f0iter.AuthenticateCognitoConfig.SessionTimeout
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolArn != nil {
						f0elemf0.UserPoolARN = f0iter.AuthenticateCognitoConfig.UserPoolArn
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolClientId != nil {
						f0elemf0.UserPoolClientID = f0iter.AuthenticateCognitoConfig.UserPoolClientId
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
						f0elemf0.UserPoolDomain = f0iter.AuthenticateCognitoConfig.UserPoolDomain
					}
					f0elem.AuthenticateCognitoConfig = f0elemf0
				}
				if f0iter.AuthenticateOidcConfig != nil {
					f0elemf1 := &svcapitypes.AuthenticateOIDCActionConfig{}
					if f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams != nil {
						f0elemf1f0 := map[string]*string{}
						for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams {
							var f0elemf1f0val string
							f0elemf1f0val = *f0elemf1f0valiter
							f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
						}
						f0elemf1.AuthenticationRequestExtraParams = f0elemf1f0
					}
					if f0iter.AuthenticateOidcConfig.AuthorizationEndpoint != nil {
						f0elemf1.AuthorizationEndpoint = f0iter.AuthenticateOidcConfig.AuthorizationEndpoint
					}
					if f0iter.AuthenticateOidcConfig.ClientId != nil {
						f0elemf1.ClientID = f0iter.AuthenticateOidcConfig.ClientId
					}
					if f0iter.AuthenticateOidcConfig.ClientSecret != nil {
						f0elemf1.ClientSecret = f0iter.AuthenticateOidcConfig.ClientSecret
					}
					if f0iter.AuthenticateOidcConfig.Issuer != nil {
						f0elemf1.Issuer = f0iter.AuthenticateOidcConfig.Issuer
					}
					if f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest != nil {
						f0elemf1.OnUnauthenticatedRequest = f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateOidcConfig.Scope != nil {
						f0elemf1.Scope = f0iter.AuthenticateOidcConfig.Scope
					}
					if f0iter.AuthenticateOidcConfig.SessionCookieName != nil {
						f0elemf1.SessionCookieName = f0iter.AuthenticateOidcConfig.SessionCookieName
					}
					if f0iter.AuthenticateOidcConfig.SessionTimeout != nil {
						f0elemf1.SessionTimeout = f0iter.AuthenticateOidcConfig.SessionTimeout
					}
					if f0iter.AuthenticateOidcConfig.TokenEndpoint != nil {
						f0elemf1.TokenEndpoint = f0iter.AuthenticateOidcConfig.TokenEndpoint
					}
					if f0iter.AuthenticateOidcConfig.UseExistingClientSecret != nil {
						f0elemf1.UseExistingClientSecret = f0iter.AuthenticateOidcConfig.UseExistingClientSecret
					}
					if f0iter.AuthenticateOidcConfig.UserInfoEndpoint != nil {
						f0elemf1.UserInfoEndpoint = f0iter.AuthenticateOidcConfig.UserInfoEndpoint
					}
					f0elem.AuthenticateOIDCConfig = f0elemf1
				}
				if f0iter.FixedResponseConfig != nil {
					f0elemf2 := &svcapitypes.FixedResponseActionConfig{}
					if f0iter.FixedResponseConfig.ContentType != nil {
						f0elemf2.ContentType = f0iter.FixedResponseConfig.ContentType
					}
					if f0iter.FixedResponseConfig.MessageBody != nil {
						f0elemf2.MessageBody = f0iter.FixedResponseConfig.MessageBody
					}
					if f0iter.FixedResponseConfig.StatusCode != nil {
						f0elemf2.StatusCode = f0iter.FixedResponseConfig.StatusCode
					}
					f0elem.FixedResponseConfig = f0elemf2
				}
				if f0iter.ForwardConfig != nil {
					f0elemf3 := &svcapitypes.ForwardActionConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
						f0elemf3f0 := &svcapitypes.TargetGroupStickinessConfig{}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
							f0elemf3f0.DurationSeconds = f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds
						}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
							f0elemf3f0.Enabled = f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled
						}
						f0elemf3.TargetGroupStickinessConfig = f0elemf3f0
					}
					if f0iter.ForwardConfig.TargetGroups != nil {
						f0elemf3f1 := []*svcapitypes.TargetGroupTuple{}
						for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
							f0elemf3f1elem := &svcapitypes.TargetGroupTuple{}
							if f0elemf3f1iter.TargetGroupArn != nil {
								f0elemf3f1elem.TargetGroupARN = f0elemf3f1iter.TargetGroupArn
							}
							if f0elemf3f1iter.Weight != nil {
								f0elemf3f1elem.Weight = f0elemf3f1iter.Weight
							}
							f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
						}
						f0elemf3.TargetGroups = f0elemf3f1
					}
					f0elem.ForwardConfig = f0elemf3
				}
				if f0iter.Order != nil {
					f0elem.Order = f0iter.Order
				}
				if f0iter.RedirectConfig != nil {
					f0elemf5 := &svcapitypes.RedirectActionConfig{}
					if f0iter.RedirectConfig.Host != nil {
						f0elemf5.Host = f0iter.RedirectConfig.Host
					}
					if f0iter.RedirectConfig.Path != nil {
						f0elemf5.Path = f0iter.RedirectConfig.Path
					}
					if f0iter.RedirectConfig.Port != nil {
						f0elemf5.Port = f0iter.RedirectConfig.Port
					}
					if f0iter.RedirectConfig.Protocol != nil {
						f0elemf5.Protocol = f0iter.RedirectConfig.Protocol
					}
					if f0iter.RedirectConfig.Query != nil {
						f0elemf5.Query = f0iter.RedirectConfig.Query
					}
					if f0iter.RedirectConfig.StatusCode != nil {
						f0elemf5.StatusCode = f0iter.RedirectConfig.StatusCode
					}
					f0elem.RedirectConfig = f0elemf5
				}
				if f0iter.TargetGroupArn != nil {
					f0elem.TargetGroupARN = f0iter.TargetGroupArn
				}
				if f0iter.Type != nil {
					f0elem.Type = f0iter.Type
				}
				f0 = append(f0, f0elem)
			}
			cr.Spec.ForProvider.Actions = f0
		} else {
			cr.Spec.ForProvider.Actions = nil
		}
		if elem.Conditions != nil {
			f1 := []*svcapitypes.RuleCondition{}
			for _, f1iter := range elem.Conditions {
				f1elem := &svcapitypes.RuleCondition{}
				if f1iter.Field != nil {
					f1elem.Field = f1iter.Field
				}
				if f1iter.HostHeaderConfig != nil {
					f1elemf1 := &svcapitypes.HostHeaderConditionConfig{}
					if f1iter.HostHeaderConfig.Values != nil {
						f1elemf1f0 := []*string{}
						for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
							var f1elemf1f0elem string
							f1elemf1f0elem = *f1elemf1f0iter
							f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
						}
						f1elemf1.Values = f1elemf1f0
					}
					f1elem.HostHeaderConfig = f1elemf1
				}
				if f1iter.HttpHeaderConfig != nil {
					f1elemf2 := &svcapitypes.HTTPHeaderConditionConfig{}
					if f1iter.HttpHeaderConfig.HttpHeaderName != nil {
						f1elemf2.HTTPHeaderName = f1iter.HttpHeaderConfig.HttpHeaderName
					}
					if f1iter.HttpHeaderConfig.Values != nil {
						f1elemf2f1 := []*string{}
						for _, f1elemf2f1iter := range f1iter.HttpHeaderConfig.Values {
							var f1elemf2f1elem string
							f1elemf2f1elem = *f1elemf2f1iter
							f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
						}
						f1elemf2.Values = f1elemf2f1
					}
					f1elem.HTTPHeaderConfig = f1elemf2
				}
				if f1iter.HttpRequestMethodConfig != nil {
					f1elemf3 := &svcapitypes.HTTPRequestMethodConditionConfig{}
					if f1iter.HttpRequestMethodConfig.Values != nil {
						f1elemf3f0 := []*string{}
						for _, f1elemf3f0iter := range f1iter.HttpRequestMethodConfig.Values {
							var f1elemf3f0elem string
							f1elemf3f0elem = *f1elemf3f0iter
							f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
						}
						f1elemf3.Values = f1elemf3f0
					}
					f1elem.HTTPRequestMethodConfig = f1elemf3
				}
				if f1iter.PathPatternConfig != nil {
					f1elemf4 := &svcapitypes.PathPatternConditionConfig{}
					if f1iter.PathPatternConfig.Values != nil {
						f1elemf4f0 := []*string{}
						for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
							var f1elemf4f0elem string
							f1elemf4f0elem = *f1elemf4f0iter
							f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
						}
						f1elemf4.Values = f1elemf4f0
					}
					f1elem.PathPatternConfig = f1elemf4
				}
				if f1iter.QueryStringConfig != nil {
					f1elemf5 := &svcapitypes.QueryStringConditionConfig{}
					if f1iter.QueryStringConfig.Values != nil {
						f1elemf5f0 := []*svcapitypes.QueryStringKeyValuePair{}
						for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
							f1elemf5f0elem := &svcapitypes.QueryStringKeyValuePair{}
							if f1elemf5f0iter.Key != nil {
								f1elemf5f0elem.Key = f1elemf5f0iter.Key
							}
							if f1elemf5f0iter.Value != nil {
								f1elemf5f0elem.Value = f1elemf5f0iter.Value
							}
							f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
						}
						f1elemf5.Values = f1elemf5f0
					}
					f1elem.QueryStringConfig = f1elemf5
				}
				if f1iter.SourceIpConfig != nil {
					f1elemf6 := &svcapitypes.SourceIPConditionConfig{}
					if f1iter.SourceIpConfig.Values != nil {
						f1elemf6f0 := []*string{}
						for _, f1elemf6f0iter := range f1iter.SourceIpConfig.Values {
							var f1elemf6f0elem string
							f1elemf6f0elem = *f1elemf6f0iter
							f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
						}
						f1elemf6.Values = f1elemf6f0
					}
					f1elem.SourceIPConfig = f1elemf6
				}
				if f1iter.Values != nil {
					f1elemf7 := []*string{}
					for _, f1elemf7iter := range f1iter.Values {
						var f1elemf7elem string
						f1elemf7elem = *f1elemf7iter
						f1elemf7 = append(f1elemf7, &f1elemf7elem)
					}
					f1elem.Values = f1elemf7
				}
				f1 = append(f1, f1elem)
			}
			cr.Spec.ForProvider.Conditions = f1
		} else {
			cr.Spec.ForProvider.Conditions = nil
		}
		found = true
		break
	}
	if !found {
		_ = found
	}

	return cr
}

// GenerateCreateRuleInput returns a create input.
func GenerateCreateRuleInput(cr *svcapitypes.Rule) *svcsdk.CreateRuleInput {
	res := &svcsdk.CreateRuleInput{}

	if cr.Spec.ForProvider.Actions != nil {
		f0 := []*svcsdk.Action{}
		for _, f0iter := range cr.Spec.ForProvider.Actions {
			f0elem := &svcsdk.Action{}
			if f0iter.AuthenticateCognitoConfig != nil {
				f0elemf0 := &svcsdk.AuthenticateCognitoActionConfig{}
				if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
					f0elemf0f0 := map[string]*string{}
					for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
						var f0elemf0f0val string
						f0elemf0f0val = *f0elemf0f0valiter
						f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
					}
					f0elemf0.SetAuthenticationRequestExtraParams(f0elemf0f0)
				}
				if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
					f0elemf0.SetOnUnauthenticatedRequest(*f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateCognitoConfig.Scope != nil {
					f0elemf0.SetScope(*f0iter.AuthenticateCognitoConfig.Scope)
				}
				if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
					f0elemf0.SetSessionCookieName(*f0iter.AuthenticateCognitoConfig.SessionCookieName)
				}
				if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
					f0elemf0.SetSessionTimeout(*f0iter.AuthenticateCognitoConfig.SessionTimeout)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolARN != nil {
					f0elemf0.SetUserPoolArn(*f0iter.AuthenticateCognitoConfig.UserPoolARN)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolClientID != nil {
					f0elemf0.SetUserPoolClientId(*f0iter.AuthenticateCognitoConfig.UserPoolClientID)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
					f0elemf0.SetUserPoolDomain(*f0iter.AuthenticateCognitoConfig.UserPoolDomain)
				}
				f0elem.SetAuthenticateCognitoConfig(f0elemf0)
			}
			if f0iter.AuthenticateOIDCConfig != nil {
				f0elemf1 := &svcsdk.AuthenticateOidcActionConfig{}
				if f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams != nil {
					f0elemf1f0 := map[string]*string{}
					for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams {
						var f0elemf1f0val string
						f0elemf1f0val = *f0elemf1f0valiter
						f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
					}
					f0elemf1.SetAuthenticationRequestExtraParams(f0elemf1f0)
				}
				if f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint != nil {
					f0elemf1.SetAuthorizationEndpoint(*f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.ClientID != nil {
					f0elemf1.SetClientId(*f0iter.AuthenticateOIDCConfig.ClientID)
				}
				if f0iter.AuthenticateOIDCConfig.ClientSecret != nil {
					f0elemf1.SetClientSecret(*f0iter.AuthenticateOIDCConfig.ClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.Issuer != nil {
					f0elemf1.SetIssuer(*f0iter.AuthenticateOIDCConfig.Issuer)
				}
				if f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest != nil {
					f0elemf1.SetOnUnauthenticatedRequest(*f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateOIDCConfig.Scope != nil {
					f0elemf1.SetScope(*f0iter.AuthenticateOIDCConfig.Scope)
				}
				if f0iter.AuthenticateOIDCConfig.SessionCookieName != nil {
					f0elemf1.SetSessionCookieName(*f0iter.AuthenticateOIDCConfig.SessionCookieName)
				}
				if f0iter.AuthenticateOIDCConfig.SessionTimeout != nil {
					f0elemf1.SetSessionTimeout(*f0iter.AuthenticateOIDCConfig.SessionTimeout)
				}
				if f0iter.AuthenticateOIDCConfig.TokenEndpoint != nil {
					f0elemf1.SetTokenEndpoint(*f0iter.AuthenticateOIDCConfig.TokenEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.UseExistingClientSecret != nil {
					f0elemf1.SetUseExistingClientSecret(*f0iter.AuthenticateOIDCConfig.UseExistingClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.UserInfoEndpoint != nil {
					f0elemf1.SetUserInfoEndpoint(*f0iter.AuthenticateOIDCConfig.UserInfoEndpoint)
				}
				f0elem.SetAuthenticateOidcConfig(f0elemf1)
			}
			if f0iter.FixedResponseConfig != nil {
				f0elemf2 := &svcsdk.FixedResponseActionConfig{}
				if f0iter.FixedResponseConfig.ContentType != nil {
					f0elemf2.SetContentType(*f0iter.FixedResponseConfig.ContentType)
				}
				if f0iter.FixedResponseConfig.MessageBody != nil {
					f0elemf2.SetMessageBody(*f0iter.FixedResponseConfig.MessageBody)
				}
				if f0iter.FixedResponseConfig.StatusCode != nil {
					f0elemf2.SetStatusCode(*f0iter.FixedResponseConfig.StatusCode)
				}
				f0elem.SetFixedResponseConfig(f0elemf2)
			}
			if f0iter.ForwardConfig != nil {
				f0elemf3 := &svcsdk.ForwardActionConfig{}
				if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
					f0elemf3f0 := &svcsdk.TargetGroupStickinessConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
						f0elemf3f0.SetDurationSeconds(*f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds)
					}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
						f0elemf3f0.SetEnabled(*f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled)
					}
					f0elemf3.SetTargetGroupStickinessConfig(f0elemf3f0)
				}
				if f0iter.ForwardConfig.TargetGroups != nil {
					f0elemf3f1 := []*svcsdk.TargetGroupTuple{}
					for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
						f0elemf3f1elem := &svcsdk.TargetGroupTuple{}
						if f0elemf3f1iter.TargetGroupARN != nil {
							f0elemf3f1elem.SetTargetGroupArn(*f0elemf3f1iter.TargetGroupARN)
						}
						if f0elemf3f1iter.Weight != nil {
							f0elemf3f1elem.SetWeight(*f0elemf3f1iter.Weight)
						}
						f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
					}
					f0elemf3.SetTargetGroups(f0elemf3f1)
				}
				f0elem.SetForwardConfig(f0elemf3)
			}
			if f0iter.Order != nil {
				f0elem.SetOrder(*f0iter.Order)
			}
			if f0iter.RedirectConfig != nil {
				f0elemf5 := &svcsdk.RedirectActionConfig{}
				if f0iter.RedirectConfig.Host != nil {
					f0elemf5.SetHost(*f0iter.RedirectConfig.Host)
				}
				if f0iter.RedirectConfig.Path != nil {
					f0elemf5.SetPath(*f0iter.RedirectConfig.Path)
				}
				if f0iter.RedirectConfig.Port != nil {
					f0elemf5.SetPort(*f0iter.RedirectConfig.Port)
				}
				if f0iter.RedirectConfig.Protocol != nil {
					f0elemf5.SetProtocol(*f0iter.RedirectConfig.Protocol)
				}
				if f0iter.RedirectConfig.Query != nil {
					f0elemf5.SetQuery(*f0iter.RedirectConfig.Query)
				}
				if f0iter.RedirectConfig.StatusCode != nil {
					f0elemf5.SetStatusCode(*f0iter.RedirectConfig.StatusCode)
				}
				f0elem.SetRedirectConfig(f0elemf5)
			}
			if f0iter.TargetGroupARN != nil {
				f0elem.SetTargetGroupArn(*f0iter.TargetGroupARN)
			}
			if f0iter.Type != nil {
				f0elem.SetType(*f0iter.Type)
			}
			f0 = append(f0, f0elem)
		}
		res.SetActions(f0)
	}
	if cr.Spec.ForProvider.Conditions != nil {
		f1 := []*svcsdk.RuleCondition{}
		for _, f1iter := range cr.Spec.ForProvider.Conditions {
			f1elem := &svcsdk.RuleCondition{}
			if f1iter.Field != nil {
				f1elem.SetField(*f1iter.Field)
			}
			if f1iter.HostHeaderConfig != nil {
				f1elemf1 := &svcsdk.HostHeaderConditionConfig{}
				if f1iter.HostHeaderConfig.Values != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetValues(f1elemf1f0)
				}
				f1elem.SetHostHeaderConfig(f1elemf1)
			}
			if f1iter.HTTPHeaderConfig != nil {
				f1elemf2 := &svcsdk.HttpHeaderConditionConfig{}
				if f1iter.HTTPHeaderConfig.HTTPHeaderName != nil {
					f1elemf2.SetHttpHeaderName(*f1iter.HTTPHeaderConfig.HTTPHeaderName)
				}
				if f1iter.HTTPHeaderConfig.Values != nil {
					f1elemf2f1 := []*string{}
					for _, f1elemf2f1iter := range f1iter.HTTPHeaderConfig.Values {
						var f1elemf2f1elem string
						f1elemf2f1elem = *f1elemf2f1iter
						f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
					}
					f1elemf2.SetValues(f1elemf2f1)
				}
				f1elem.SetHttpHeaderConfig(f1elemf2)
			}
			if f1iter.HTTPRequestMethodConfig != nil {
				f1elemf3 := &svcsdk.HttpRequestMethodConditionConfig{}
				if f1iter.HTTPRequestMethodConfig.Values != nil {
					f1elemf3f0 := []*string{}
					for _, f1elemf3f0iter := range f1iter.HTTPRequestMethodConfig.Values {
						var f1elemf3f0elem string
						f1elemf3f0elem = *f1elemf3f0iter
						f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
					}
					f1elemf3.SetValues(f1elemf3f0)
				}
				f1elem.SetHttpRequestMethodConfig(f1elemf3)
			}
			if f1iter.PathPatternConfig != nil {
				f1elemf4 := &svcsdk.PathPatternConditionConfig{}
				if f1iter.PathPatternConfig.Values != nil {
					f1elemf4f0 := []*string{}
					for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
						var f1elemf4f0elem string
						f1elemf4f0elem = *f1elemf4f0iter
						f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
					}
					f1elemf4.SetValues(f1elemf4f0)
				}
				f1elem.SetPathPatternConfig(f1elemf4)
			}
			if f1iter.QueryStringConfig != nil {
				f1elemf5 := &svcsdk.QueryStringConditionConfig{}
				if f1iter.QueryStringConfig.Values != nil {
					f1elemf5f0 := []*svcsdk.QueryStringKeyValuePair{}
					for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
						f1elemf5f0elem := &svcsdk.QueryStringKeyValuePair{}
						if f1elemf5f0iter.Key != nil {
							f1elemf5f0elem.SetKey(*f1elemf5f0iter.Key)
						}
						if f1elemf5f0iter.Value != nil {
							f1elemf5f0elem.SetValue(*f1elemf5f0iter.Value)
						}
						f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
					}
					f1elemf5.SetValues(f1elemf5f0)
				}
				f1elem.SetQueryStringConfig(f1elemf5)
			}
			if f1iter.SourceIPConfig != nil {
				f1elemf6 := &svcsdk.SourceIpConditionConfig{}
				if f1iter.SourceIPConfig.Values != nil {
					f1elemf6f0 := []*string{}
					for _, f1elemf6f0iter := range f1iter.SourceIPConfig.Values {
						var f1elemf6f0elem string
						f1elemf6f0elem = *f1elemf6f0iter
						f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
					}
					f1elemf6.SetValues(f1elemf6f0)
				}
				f1elem.SetSourceIpConfig(f1elemf6)
			}
			if f1iter.Values != nil {
				f1elemf7 := []*string{}
				for _, f1elemf7iter := range f1iter.Values {
					var f1elemf7elem string
					f1elemf7elem = *f1elemf7iter
					f1elemf7 = append(f1elemf7, &f1elemf7elem)
				}
				f1elem.SetValues(f1elemf7)
			}
			f1 = append(f1, f1elem)
		}
		res.SetConditions(f1)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range cr.Spec.ForProvider.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return res
}

// GenerateModifyRuleInput returns an update input.
func GenerateModifyRuleInput(cr *svcapitypes.Rule) *svcsdk.ModifyRuleInput {
	res := &svcsdk.ModifyRuleInput{}

	if cr.Spec.ForProvider.Actions != nil {
		f0 := []*svcsdk.Action{}
		for _, f0iter := range cr.Spec.ForProvider.Actions {
			f0elem := &svcsdk.Action{}
			if f0iter.AuthenticateCognitoConfig != nil {
				f0elemf0 := &svcsdk.AuthenticateCognitoActionConfig{}
				if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
					f0elemf0f0 := map[string]*string{}
					for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
						var f0elemf0f0val string
						f0elemf0f0val = *f0elemf0f0valiter
						f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
					}
					f0elemf0.SetAuthenticationRequestExtraParams(f0elemf0f0)
				}
				if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
					f0elemf0.SetOnUnauthenticatedRequest(*f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateCognitoConfig.Scope != nil {
					f0elemf0.SetScope(*f0iter.AuthenticateCognitoConfig.Scope)
				}
				if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
					f0elemf0.SetSessionCookieName(*f0iter.AuthenticateCognitoConfig.SessionCookieName)
				}
				if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
					f0elemf0.SetSessionTimeout(*f0iter.AuthenticateCognitoConfig.SessionTimeout)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolARN != nil {
					f0elemf0.SetUserPoolArn(*f0iter.AuthenticateCognitoConfig.UserPoolARN)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolClientID != nil {
					f0elemf0.SetUserPoolClientId(*f0iter.AuthenticateCognitoConfig.UserPoolClientID)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
					f0elemf0.SetUserPoolDomain(*f0iter.AuthenticateCognitoConfig.UserPoolDomain)
				}
				f0elem.SetAuthenticateCognitoConfig(f0elemf0)
			}
			if f0iter.AuthenticateOIDCConfig != nil {
				f0elemf1 := &svcsdk.AuthenticateOidcActionConfig{}
				if f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams != nil {
					f0elemf1f0 := map[string]*string{}
					for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams {
						var f0elemf1f0val string
						f0elemf1f0val = *f0elemf1f0valiter
						f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
					}
					f0elemf1.SetAuthenticationRequestExtraParams(f0elemf1f0)
				}
				if f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint != nil {
					f0elemf1.SetAuthorizationEndpoint(*f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.ClientID != nil {
					f0elemf1.SetClientId(*f0iter.AuthenticateOIDCConfig.ClientID)
				}
				if f0iter.AuthenticateOIDCConfig.ClientSecret != nil {
					f0elemf1.SetClientSecret(*f0iter.AuthenticateOIDCConfig.ClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.Issuer != nil {
					f0elemf1.SetIssuer(*f0iter.AuthenticateOIDCConfig.Issuer)
				}
				if f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest != nil {
					f0elemf1.SetOnUnauthenticatedRequest(*f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateOIDCConfig.Scope != nil {
					f0elemf1.SetScope(*f0iter.AuthenticateOIDCConfig.Scope)
				}
				if f0iter.AuthenticateOIDCConfig.SessionCookieName != nil {
					f0elemf1.SetSessionCookieName(*f0iter.AuthenticateOIDCConfig.SessionCookieName)
				}
				if f0iter.AuthenticateOIDCConfig.SessionTimeout != nil {
					f0elemf1.SetSessionTimeout(*f0iter.AuthenticateOIDCConfig.SessionTimeout)
				}
				if f0iter.AuthenticateOIDCConfig.TokenEndpoint != nil {
					f0elemf1.SetTokenEndpoint(*f0iter.AuthenticateOIDCConfig.TokenEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.UseExistingClientSecret != nil {
					f0elemf1.SetUseExistingClientSecret(*f0iter.AuthenticateOIDCConfig.UseExistingClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.UserInfoEndpoint != nil {
					f0elemf1.SetUserInfoEndpoint(*f0iter.AuthenticateOIDCConfig.UserInfoEndpoint)
				}
				f0elem.SetAuthenticateOidcConfig(f0elemf1)
			}
			if f0iter.FixedResponseConfig != nil {
				f0elemf2 := &svcsdk.FixedResponseActionConfig{}
				if f0iter.FixedResponseConfig.ContentType != nil {
					f0elemf2.SetContentType(*f0iter.FixedResponseConfig.ContentType)
				}
				if f0iter.FixedResponseConfig.MessageBody != nil {
					f0elemf2.SetMessageBody(*f0iter.FixedResponseConfig.MessageBody)
				}
				if f0iter.FixedResponseConfig.StatusCode != nil {
					f0elemf2.SetStatusCode(*f0iter.FixedResponseConfig.StatusCode)
				}
				f0elem.SetFixedResponseConfig(f0elemf2)
			}
			if f0iter.ForwardConfig != nil {
				f0elemf3 := &svcsdk.ForwardActionConfig{}
				if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
					f0elemf3f0 := &svcsdk.TargetGroupStickinessConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
						f0elemf3f0.SetDurationSeconds(*f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds)
					}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
						f0elemf3f0.SetEnabled(*f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled)
					}
					f0elemf3.SetTargetGroupStickinessConfig(f0elemf3f0)
				}
				if f0iter.ForwardConfig.TargetGroups != nil {
					f0elemf3f1 := []*svcsdk.TargetGroupTuple{}
					for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
						f0elemf3f1elem := &svcsdk.TargetGroupTuple{}
						if f0elemf3f1iter.TargetGroupARN != nil {
							f0elemf3f1elem.SetTargetGroupArn(*f0elemf3f1iter.TargetGroupARN)
						}
						if f0elemf3f1iter.Weight != nil {
							f0elemf3f1elem.SetWeight(*f0elemf3f1iter.Weight)
						}
						f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
					}
					f0elemf3.SetTargetGroups(f0elemf3f1)
				}
				f0elem.SetForwardConfig(f0elemf3)
			}
			if f0iter.Order != nil {
				f0elem.SetOrder(*f0iter.Order)
			}
			if f0iter.RedirectConfig != nil {
				f0elemf5 := &svcsdk.RedirectActionConfig{}
				if f0iter.RedirectConfig.Host != nil {
					f0elemf5.SetHost(*f0iter.RedirectConfig.Host)
				}
				if f0iter.RedirectConfig.Path != nil {
					f0elemf5.SetPath(*f0iter.RedirectConfig.Path)
				}
				if f0iter.RedirectConfig.Port != nil {
					f0elemf5.SetPort(*f0iter.RedirectConfig.Port)
				}
				if f0iter.RedirectConfig.Protocol != nil {
					f0elemf5.SetProtocol(*f0iter.RedirectConfig.Protocol)
				}
				if f0iter.RedirectConfig.Query != nil {
					f0elemf5.SetQuery(*f0iter.RedirectConfig.Query)
				}
				if f0iter.RedirectConfig.StatusCode != nil {
					f0elemf5.SetStatusCode(*f0iter.RedirectConfig.StatusCode)
				}
				f0elem.SetRedirectConfig(f0elemf5)
			}
			if f0iter.TargetGroupARN != nil {
				f0elem.SetTargetGroupArn(*f0iter.TargetGroupARN)
			}
			if f0iter.Type != nil {
				f0elem.SetType(*f0iter.Type)
			}
			f0 = append(f0, f0elem)
		}
		res.SetActions(f0)
	}
	if cr.Spec.ForProvider.Conditions != nil {
		f1 := []*svcsdk.RuleCondition{}
		for _, f1iter := range cr.Spec.ForProvider.Conditions {
			f1elem := &svcsdk.RuleCondition{}
			if f1iter.Field != nil {
				f1elem.SetField(*f1iter.Field)
			}
			if f1iter.HostHeaderConfig != nil {
				f1elemf1 := &svcsdk.HostHeaderConditionConfig{}
				if f1iter.HostHeaderConfig.Values != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetValues(f1elemf1f0)
				}
				f1elem.SetHostHeaderConfig(f1elemf1)
			}
			if f1iter.HTTPHeaderConfig != nil {
				f1elemf2 := &svcsdk.HttpHeaderConditionConfig{}
				if f1iter.HTTPHeaderConfig.HTTPHeaderName != nil {
					f1elemf2.SetHttpHeaderName(*f1iter.HTTPHeaderConfig.HTTPHeaderName)
				}
				if f1iter.HTTPHeaderConfig.Values != nil {
					f1elemf2f1 := []*string{}
					for _, f1elemf2f1iter := range f1iter.HTTPHeaderConfig.Values {
						var f1elemf2f1elem string
						f1elemf2f1elem = *f1elemf2f1iter
						f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
					}
					f1elemf2.SetValues(f1elemf2f1)
				}
				f1elem.SetHttpHeaderConfig(f1elemf2)
			}
			if f1iter.HTTPRequestMethodConfig != nil {
				f1elemf3 := &svcsdk.HttpRequestMethodConditionConfig{}
				if f1iter.HTTPRequestMethodConfig.Values != nil {
					f1elemf3f0 := []*string{}
					for _, f1elemf3f0iter := range f1iter.HTTPRequestMethodConfig.Values {
						var f1elemf3f0elem string
						f1elemf3f0elem = *f1elemf3f0iter
						f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
					}
					f1elemf3.SetValues(f1elemf3f0)
				}
				f1elem.SetHttpRequestMethodConfig(f1elemf3)
			}
			if f1iter.PathPatternConfig != nil {
				f1elemf4 := &svcsdk.PathPatternConditionConfig{}
				if f1iter.PathPatternConfig.Values != nil {
					f1elemf4f0 := []*string{}
					for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
						var f1elemf4f0elem string
						f1elemf4f0elem = *f1elemf4f0iter
						f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
					}
					f1elemf4.SetValues(f1elemf4f0)
				}
				f1elem.SetPathPatternConfig(f1elemf4)
			}
			if f1iter.QueryStringConfig != nil {
				f1elemf5 := &svcsdk.QueryStringConditionConfig{}
				if f1iter.QueryStringConfig.Values != nil {
					f1elemf5f0 := []*svcsdk.QueryStringKeyValuePair{}
					for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
						f1elemf5f0elem := &svcsdk.QueryStringKeyValuePair{}
						if f1elemf5f0iter.Key != nil {
							f1elemf5f0elem.SetKey(*f1elemf5f0iter.Key)
						}
						if f1elemf5f0iter.Value != nil {
							f1elemf5f0elem.SetValue(*f1elemf5f0iter.Value)
						}
						f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
					}
					f1elemf5.SetValues(f1elemf5f0)
				}
				f1elem.SetQueryStringConfig(f1elemf5)
			}
			if f1iter.SourceIPConfig != nil {
				f1elemf6 := &svcsdk.SourceIpConditionConfig{}
				if f1iter.SourceIPConfig.Values != nil {
					f1elemf6f0 := []*string{}
					for _, f1elemf6f0iter := range f1iter.SourceIPConfig.Values {
						var f1elemf6f0elem string
						f1elemf6f0elem = *f1elemf6f0iter
						f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
					}
					f1elemf6.SetValues(f1elemf6f0)
				}
				f1elem.SetSourceIpConfig(f1elemf6)
			}
			if f1iter.Values != nil {
				f1elemf7 := []*string{}
				for _, f1elemf7iter := range f1iter.Values {
					var f1elemf7elem string
					f1elemf7elem = *f1elemf7iter
					f1elemf7 = append(f1elemf7, &f1elemf7elem)
				}
				f1elem.SetValues(f1elemf7)
			}
			f1 = append(f1, f1elem)
		}
		res.SetConditions(f1)
	}

	return res
}

// GenerateDeleteRuleInput returns a deletion input.
func GenerateDeleteRuleInput(cr *svcapitypes.Rule) *svcsdk.DeleteRuleInput {
	res := &svcsdk.DeleteRuleInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "RuleNotFound"
}
